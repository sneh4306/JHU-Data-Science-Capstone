lapply(list(fit,fit2),coef)
names(swiss)
all<-lm(Fertility ~.,swiss)
summary(all)
summary(lm(Fertility~agriculture,swiss))
names(swiss)
summary(lm(Fertility~Agriculture,swiss))
cor(Examination,Education)
summary(lm(Fertility~Agriculture,swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec<-sum(swiss$Examination+swiss$Catholic)
ec<-sum(swiss$Examination,swiss$Catholic)
ec<-swiss$Examination+swiss$Catholic
efit(Fertility~.+ec,swiss)
efit<-lm(Fertility~.+ec,swiss)
all$coef-efit$coef
all$coefficients-efit$coefficients
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
?p.test
?t.test
t.test(x,y,alternative = "two.sided")
t.test(x,y,alternative = "two.sided",paired = TRUE)
summary(lm(y~x))
e
fit$e
summary(fit)$e
summary(fit)$sigma
fit<-lm(y~x)
summary(fit)$e
fit$e
sigma <- sqrt(sum(e ^ 2) / (n - 2))
sigma <- sqrt(sum(fit$e ^ 2) / (n - 2))
sigma
summary(fit)$sigma
sigma <- sqrt(sum(summary(fit)$e ^ 2) / (n - 2))
sigma
data(mtcars)
fit1<-lm(mpg~weight,mtcars)
names(mtcars)
fit1<-lm(mpg~wt,mtcars)
summary(fit1)
coef
summary(fit1)$coef
d<-summary(fit1)$coef
d
data(mtcars)
y <- mtcars$mpg
x <- mtcars$wt
fit_car <- lm(y ~ x)
predict(fit_car, newdata = data.frame(x = mean(x)), interval = ("confidence"))
fit_car$coefficients
fit_car$coef
help(mtcars)
predict(fit_car, newdata = data.frame(x = 3000), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 3), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 2), interval = ("prediction"))
predict(fit_car, newdata = data.frame(x = 2), interval = ("confidence"))
predict(fit_car, newdata = data.frame(x = 1), interval = ("confidence"))
fit_car2 <- lm(y ~ I(x/2))
sumCoef2 <- coef(summary(fit_car2))
(sumCoef2[2,1] + c(-1, 1) * qt(.975, df = fit_car2$df) * sumCoef2[2, 2])
summary(fit_car2)$sigma/sqrt(length(y))
sumCoef2[2,2]
2*summary(fit_car2)$sigma/sqrt(length(y))
predict(fit_car2, newdata = data.frame(x = 1), interval = ("confidence"))
sumCoef2
library(sswirl)
library(swirl)
swirl()
head(InsectSprays)
dim(InsectSprays)
head(InsectSprays,15)
sx
A
head(InsectSprays,15)
sA
summary(InsectSprays[,2])
sapply(InsectSprays,classes)
sA
sapply(InsectSprays,class)
fit<-lm(count~spray,InsectSprays)
summary(fit)$coef
est<-
""
est<-summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit<-lm(count~spray-1,InsectSprays)
summary(nfit)$coef
spray2<-relevel(factor(InsectSprays$spray),"C")
spray2<-relevel(InsectSprays$spray,"C")
fit2<-lm(count~spray,InsectSprays)
fit2<-lm(count~spray2,InsectSprays)
summary(fit2)
summary(fit2)$coef
mean(sC)
fit<-lm(count~spray,InsectSprays)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hhunger)
dim(hunger)
length(hunger$Indicator)
names(hunger)
fit<-lm(Numeric~Year,hunger)
summary(fit)$coef
lmF<-lm(Numeric~Year,hunger[hunger$Sex=="Female"])
lmF<-lm(Numeric[hunger$Sex=="Female"]~Year[hunger$Sex=="Female"],hunger)
lmM<-lm(Numeric[hunger$Sex=="Male"]~Year[hunger$Sex=="Male"],hunger)
lmBoth<-lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter<-lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
library(swirl)
swirl()
fit<-lm(y~x,out2)
plot(fit,which=1)
fitno<-lm(y~x,out2[-1,])
plot(fitno,which=1)
coef(fitno)-coef(fit)
coef(fit)-coef(fitno)
head(dfbeta(fit))
?dfbeta
resno<-out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma<-sqrt(deviance(fit))
sigma<-sqrt(deviance(fit)/df.residual((fit)))
rstd<-resid(fit)/(sigma*(1-hatvalues(fit)))
rstd<-resid(fit)/(sigma*sqrt((1-hatvalues(fit))))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1<-deviance(fitno)/sqrt(df.residual(fitno))
sigma1<-sqrt(deviance(fitno))/(df.residual(fitno)
)
sigma1<-sqrt(deviance(fitno)/df.residual(fitno)
)
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
rstudent(fitno)[1]
head(rstudent(fit))
predict(fit,out2)-predict(fitno,out2)
dy<-predict(fit,out2)-predict(fitno,out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit,which=5)
data(mtcars)
names(mtcars)
unique(mtcars$cyl)
lm(mpg~factor(cyl)[mtcars$cyl==8]+wt,mtcars)
lm(mpg~factor(cyl)+wt,mtcars[mtcars$cyl==8])
lm(mpg~factor(cyl[cyl==8])+wt,mtcars)
summary(mtcars)
lm(mpg~cyl[mtcars$cyl==8+wt,mtcars)
lm(mpg~cyl[mtcars$cyl==8]+wt,mtcars)
lm(mpg~cyl[cyl==8]+wt,mtcars)
d<-subset(mtcars,mtcars$cyl==8)
lm(mpg~cyl+wt,d)
d1<-subset(mtcars,mtcars$cyl==4)
lm(mpg~cyl+wt,d1)
(23.868-39.571)/2
lm(mpg~factor(cyl==8)+wt,mtcars)
lm(mpg~factor(cyl==4)+wt,mtcars)
35.067-30.354
lm(mpg~factor(cyl)+wt,mtcars)
lm(mpg~factor(cyl),mtcars)
fit<-lm(mpg~factor(cyl)+wt,mtcars)
fit1<-lm(mpg~factor(cyl),mtcars)
summary(fit)
summary(fit1)
fit2<-lm(mpg~factor(cyl)*wt,mtcars)
summary(fit2)
summary(fit)
anova(fit,fit2)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit3<-lm(y~x)
hatvalues(fit3)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit4<-lm(y~x)
hatvalues(fit4)
dfbeta(fit4)[5]
dfbeta(fit4)
dfbetas(fit4)
?dfbeta
library(swirl)
swirl()
swirl()
install.packages("car")
library(swirl)
swirl()
swirl()
ravenData
mdl<-glm(ravenWinNum ~ ravenScore,family = "binomial",ravenData)
lodds<-predict(mdl,data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
achisq(0.95,1)
qchisq(0.95,1)
var(rpois(1000,50))
nxt( )
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
glm(visits~date,poisson,hits)
mdl<-glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,])
which.max(hits[,'visits'])
hits[704,]
lambda<-mdl$fitted.values[704]
qpois(0.95,lambda)
mdl2<-glm(visits~date,offset=log(visits+1),family='poisson',hits)
names(hits)
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits,offset = log(visits + 1))
qpois(0.95,mdl2$fitted.values[704])
library(MASS)
?shuttle
names(shuttle)
head(shuttle)
fit<-glm(use~wind,family='binomial',shuttle)
summary(fit)
coef(fit)
fit<-glm(use~wind-1,family='binomial',shuttle)
coef(fit)
fit<-glm(use~wind[shuttle$wind=='head]-1,family='binomial',shuttle)
shuttle$auto <- 1 * (shuttle$use == "auto")
shuttle$headwind <- 1 * (shuttle$wind == "head")
fit <- glm(auto ~ headwind, data = shuttle, family = binomial)
coef(fit)
exp(coef(fit))
exp(0.25131443)/(1+exp(0.03181183))
exp(-0.25131443)/(1+exp(-0.03181183))
fit2 <- glm(auto ~ headwind+magn, data = shuttle, family = binomial)
exp(coef(fit2))
fit3<- glm(I(1-auto) ~ wind,family='binomial',shuttle)
fit4<- glm(auto ~ wind,family='binomial',shuttle)
coef(fit3)
coef(fit4)
fit5<-glm(count~relevel(spray,'B'),family='poisson',InsectSprays)
coef(fit5)
summary(fit5)$coef
exp(coef[2,1])
exp(coef(fit5)[2])
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots=0
splineterms=sapply(knots,function(knot) x>knot (x-knot))
splineterms=sapply(knots,function(knot) x>knot*(x-knot))
xMat<-cbind(1,x,splineterms)
yhat<-predict(lm(y~xMat-1))
plot(x, y, frame = FALSE, pch = 21, cex = 2, bg = "lightblue")
lines(x,yhat,col="red")
knots<-0
splineterms=sapply(knots,function(knot) x>knot*(x-knot))
xMat<-cbind(1,x,splineterms)
yhat<-predict(lm(y~xMat-1))
yhat<-predict(lm(y~xMat-1))
plot(x, y, frame = FALSE, pch = 21, cex = 2, bg = "lightblue")
lines(x,yhat,col="red")
x <- -5:5
y <- c(5.12, 3.93, 2.67, 1.87, 0.52, 0.08, 0.93, 2.05, 2.54, 3.87, 4.97)
knots <- 0
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat -1))
plot(x, y, frame = FALSE, pch = 21, cex = 2, bg = "lightblue")
lines(x, yhat, col = "red", lwd = 2)
yhat<-predict(lm(y~xMat))
plot(x, y, frame = FALSE, pch = 21, cex = 2, bg = "lightblue")
lines(x,yhat,col="red")
z <- (x > 0) * x
fit6 <- lm(y ~ x + z)
summary(fit6)
coef(fit6)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(concrete)
summary(concrete)
View(mixtures)
View(concrete)
ggplot(mixtures,aes(CompressiveStrength,1,col=Age))+geom_point()
ggplot(mixtures,aes(CompressiveStrength,1,col=FlyAsh))+geom_point()
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer)+1)
hist(log10(training$Superplasticizer))
hist(training$Superplasticizer)
hist(log10(training$Superplasticizer))
hist(log10(training$Superplasticizer+1))
sum(training$Superplasticizer==0)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training,method="pca",7)
tr<-training[,grep("^1L",names(training))]
preProcess(tr,method="pca",thresh=0.9)
p<-preProcess(tr,method="pca",thresh=0.9)
p$pcaComp
p<-preProcess(tr,method="pca",thresh=0.8)
p$pcaComp
p<-preProcess(tr,method="pca",thresh=0.9)
p$numComp
names(tr)
trainingIL <- training[,grep("^IL", names(training))]
preProc <- preProcess(trainingIL, method = 'pca', thresh = 0.8)
names(trainingIL)
p<-preProcess(trainingIL,method="pca",thresh=0.9)
p$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
trainingIL <- training[,grep("^IL", names(training))]
testIL <- test[,grep("^IL", names(test))]
testingIL <- testing[,grep("^IL", names(testing))]
p<-preProcess(trainingIL,method="pca",thresh=0.9)
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred <- predict(fit, testingIL)
cm <- confusionMatrix(pred, testingIL$diagnosis)
cm
fit <- train(diagnosis~., data=trainingIL, method="glm")
p<-preProcess(trainingIL,method="pca",thresh=0.8)
fit <- train(diagnosis~., data=trainingIL, method="glm")
View(trainingIL)
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
fit <- train(diagnosis~., data=trainingIL, method="glm")
library(caret)
fit <- train(diagnosis~., data=trainingIL, method="glm")
install.packages("e1071")
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred<-predict(fit,testingIL)
cm<-confusionMatrix(pred,testingIL$diagnosis)
cm
p
View(p)
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred <- predict(fit, testingIL)
cm <- confusionMatrix(pred, testingIL$diagnosis)
cm
fitPC <- train(diagnosis~., method="glm", data=trainingIL, preProcess="pca", trControl = trainControl(preProcOptions = list(thresh = 0.8)))
predPC <- predict(fitPC, testingIL)
cmPCA <- confusionMatrix(predPC, testingIL$diagnosis)
cmPCA
fitPC <- train(diagnosis~., method="glm", data=trainingIL, preProcess="pca")
predPC <- predict(fitPC, testingIL)
> cmPCA <- confusionMatrix(predPC, testingIL$diagnosis)
> cmPCA
predPC <- predict(fitPC, testingIL)
cmPCA <- confusionMatrix(predPC, testingIL$diagnosis)
cmPCA
?preProcess
?train
?caret::train
set.seed(3433)
preProc <- preProcess(trainingIL, method = 'pca', thresh = 0.8)
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
#nonPCA fit
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred <- predict(fit, testingIL)
cm <- confusionMatrix(pred, testingIL$diagnosis)
cm
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
preProc <- preProcess(trainingIL, method = 'pca', thresh = 0.8)
trainingIL <- training[,grep("^IL|diagnosis", names(training))]
testingIL <- testing[,grep("^IL|diagnosis", names(testing))]
#nonPCA fit
fit <- train(diagnosis~., data=trainingIL, method="glm")
pred <- predict(fit, testingIL)
cm <- confusionMatrix(pred, testingIL$diagnosis)
cm
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
str(segmentationOriginal)
head(segmentationOriginal)
training<-subset(segmentationOriginal,Case=="Train")
testing<-subset(segmentationOriginal,Case=="Test")
View(training)
summary(segmentationOriginal$TotalIntenCh2)
summary(segmentationOriginal$PerimStatusCh1)
set,seed(125)
set.seed(125)
fit<-train(Class ~ TotalIntenCh2+PerimStatusCh1+FiberWidthCh1,data=training,method="rpart")
newdata<-data.frame(TotalIntenCh2=23000,FiberWidthCh1=10,PerimStatusCh1=2)
predict(fit,newdata)
fit<-train(Class ~.,data=training,method="rpart")
predict(fit,newdata)
install.packages("rattle")
install.packages("rpart.plot")
install.packages("rpart.plot")
install.packages("googleVis")
install.packages("miniUI")
install.packages("plotly")
install.packages("leaflet")
knitr::opts_chunk$set(echo = FALSE)
suppressPackageStartupMessages(library(googleVis))
M<-gvisMotionChart(Fruits,"Fruit","Year",options = list(width=600,height=400))
plot(M)
x <- c("First part of some text,", "another part of text,",NA , "last part of text.")
library(dplyr)
x<-x %>% na.omit()
d<-data.frame(x)
d
names(d)<-"text"
(unique(unlist(strsplit(d$text, " "))))
(table(unlist(strsplit(d$text, " "))))
(table(unlist(strsplit(d$text, "\\W+"))))
wlist <- sapply( df[,-1] , strsplit , split = "\\W+", perl=TRUE)
#  Paste word pairs together
outl <- sapply( wlist , function(x) paste( head(x,-1) , tail(x,-1) , sep = " ") )
wlist <- sapply( d[,-1] , strsplit , split = "\\W+", perl=TRUE)
#  Paste word pairs together
outl <- sapply( wlist , function(x) paste( head(x,-1) , tail(x,-1) , sep = " ") )
out1
wlist <- sapply( d , strsplit , split = "\\W+", perl=TRUE)
View(wlist)
outl <- sapply( wlist , function(x) paste( head(x,-1) , tail(x,-1) , sep = " ") )
out1
View(outl)
table(unlist( outl ) )
View(d)
wlist1 <- sapply( d , strsplit , split = "\\W{2}", perl=TRUE)
View(wlist1)
table(unlist(wlist1))
wlist1 <- sapply( d , strsplit , split = "\\W{1}", perl=TRUE)
table(unlist(wlist1))
table(unlist(wlist))
getwd()
setwd("/Users/snehchitalia/desktop/R/Capstone")
setwd("/Users/snehchitalia/desktop/R/Capstone/Ngram_model")
setwd("/Users/snehchitalia/desktop/R/Capstone/Final_Ngram_model")
shiny::runApp()
library(png)
install.packages("png")
library(png)
runApp()
runApp()
